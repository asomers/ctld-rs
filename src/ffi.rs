#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(unused)]
/* automatically generated by rust-bindgen 0.69.4 */

pub const CTL_DEFAULT_DEV: &[u8; 13] = b"/dev/cam/ctl\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FreeBSD_nvlist {
    _unused: [u8; 0],
}
pub type FreeBSD_nvlist_t = FreeBSD_nvlist;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ctl_lun_status {
    CTL_LUN_NOSTATUS = 0,
    CTL_LUN_OK = 1,
    CTL_LUN_ERROR = 2,
    CTL_LUN_WARNING = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ctl_lunreq_type {
    CTL_LUNREQ_CREATE = 0,
    CTL_LUNREQ_RM = 1,
    CTL_LUNREQ_MODIFY = 2,
}
impl ctl_backend_lun_flags {
    pub const CTL_LUN_FLAG_ID_REQ: ctl_backend_lun_flags = ctl_backend_lun_flags(1);
}
impl ctl_backend_lun_flags {
    pub const CTL_LUN_FLAG_STOPPED: ctl_backend_lun_flags = ctl_backend_lun_flags(2);
}
impl ctl_backend_lun_flags {
    pub const CTL_LUN_FLAG_NO_MEDIA: ctl_backend_lun_flags = ctl_backend_lun_flags(4);
}
impl ctl_backend_lun_flags {
    pub const CTL_LUN_FLAG_PRIMARY: ctl_backend_lun_flags = ctl_backend_lun_flags(8);
}
impl ctl_backend_lun_flags {
    pub const CTL_LUN_FLAG_SERIAL_NUM: ctl_backend_lun_flags = ctl_backend_lun_flags(16);
}
impl ctl_backend_lun_flags {
    pub const CTL_LUN_FLAG_DEVID: ctl_backend_lun_flags = ctl_backend_lun_flags(32);
}
impl ctl_backend_lun_flags {
    pub const CTL_LUN_FLAG_DEV_TYPE: ctl_backend_lun_flags = ctl_backend_lun_flags(64);
}
impl ctl_backend_lun_flags {
    pub const CTL_LUN_FLAG_UNMAP: ctl_backend_lun_flags = ctl_backend_lun_flags(128);
}
impl ctl_backend_lun_flags {
    pub const CTL_LUN_FLAG_EJECTED: ctl_backend_lun_flags = ctl_backend_lun_flags(256);
}
impl ctl_backend_lun_flags {
    pub const CTL_LUN_FLAG_READONLY: ctl_backend_lun_flags = ctl_backend_lun_flags(512);
}
impl ::std::ops::BitOr<ctl_backend_lun_flags> for ctl_backend_lun_flags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ctl_backend_lun_flags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for ctl_backend_lun_flags {
    #[inline]
    fn bitor_assign(&mut self, rhs: ctl_backend_lun_flags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<ctl_backend_lun_flags> for ctl_backend_lun_flags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ctl_backend_lun_flags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for ctl_backend_lun_flags {
    #[inline]
    fn bitand_assign(&mut self, rhs: ctl_backend_lun_flags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ctl_backend_lun_flags(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_lun_create_params {
    pub flags: ctl_backend_lun_flags,
    pub device_type: u8,
    pub lun_size_bytes: u64,
    pub blocksize_bytes: u32,
    pub req_lun_id: u32,
    pub serial_num: [u8; 16usize],
    pub device_id: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_ctl_lun_create_params() {
    const UNINIT: ::std::mem::MaybeUninit<ctl_lun_create_params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ctl_lun_create_params>(),
        104usize,
        concat!("Size of: ", stringify!(ctl_lun_create_params))
    );
    assert_eq!(
        ::std::mem::align_of::<ctl_lun_create_params>(),
        8usize,
        concat!("Alignment of ", stringify!(ctl_lun_create_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_create_params),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_create_params),
            "::",
            stringify!(device_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lun_size_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_create_params),
            "::",
            stringify!(lun_size_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocksize_bytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_create_params),
            "::",
            stringify!(blocksize_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_lun_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_create_params),
            "::",
            stringify!(req_lun_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serial_num) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_create_params),
            "::",
            stringify!(serial_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_create_params),
            "::",
            stringify!(device_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_lun_rm_params {
    pub lun_id: u32,
}
#[test]
fn bindgen_test_layout_ctl_lun_rm_params() {
    const UNINIT: ::std::mem::MaybeUninit<ctl_lun_rm_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ctl_lun_rm_params>(),
        4usize,
        concat!("Size of: ", stringify!(ctl_lun_rm_params))
    );
    assert_eq!(
        ::std::mem::align_of::<ctl_lun_rm_params>(),
        4usize,
        concat!("Alignment of ", stringify!(ctl_lun_rm_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lun_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_rm_params),
            "::",
            stringify!(lun_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_lun_modify_params {
    pub lun_id: u32,
    pub lun_size_bytes: u64,
}
#[test]
fn bindgen_test_layout_ctl_lun_modify_params() {
    const UNINIT: ::std::mem::MaybeUninit<ctl_lun_modify_params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ctl_lun_modify_params>(),
        16usize,
        concat!("Size of: ", stringify!(ctl_lun_modify_params))
    );
    assert_eq!(
        ::std::mem::align_of::<ctl_lun_modify_params>(),
        8usize,
        concat!("Alignment of ", stringify!(ctl_lun_modify_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lun_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_modify_params),
            "::",
            stringify!(lun_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lun_size_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_modify_params),
            "::",
            stringify!(lun_size_bytes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ctl_lunreq_data {
    pub create: ctl_lun_create_params,
    pub rm: ctl_lun_rm_params,
    pub modify: ctl_lun_modify_params,
}
#[test]
fn bindgen_test_layout_ctl_lunreq_data() {
    const UNINIT: ::std::mem::MaybeUninit<ctl_lunreq_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ctl_lunreq_data>(),
        104usize,
        concat!("Size of: ", stringify!(ctl_lunreq_data))
    );
    assert_eq!(
        ::std::mem::align_of::<ctl_lunreq_data>(),
        8usize,
        concat!("Alignment of ", stringify!(ctl_lunreq_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lunreq_data),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lunreq_data),
            "::",
            stringify!(rm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modify) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lunreq_data),
            "::",
            stringify!(modify)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_lun_req {
    pub backend: [::std::os::raw::c_char; 32usize],
    pub reqtype: ctl_lunreq_type,
    pub reqdata: ctl_lunreq_data,
    pub args: *mut ::std::os::raw::c_void,
    pub args_nvl: *mut FreeBSD_nvlist_t,
    pub args_len: usize,
    pub result: *mut ::std::os::raw::c_void,
    pub result_nvl: *mut FreeBSD_nvlist_t,
    pub result_len: usize,
    pub status: ctl_lun_status,
    pub error_str: [::std::os::raw::c_char; 160usize],
}
#[test]
fn bindgen_test_layout_ctl_lun_req() {
    const UNINIT: ::std::mem::MaybeUninit<ctl_lun_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ctl_lun_req>(),
        360usize,
        concat!("Size of: ", stringify!(ctl_lun_req))
    );
    assert_eq!(
        ::std::mem::align_of::<ctl_lun_req>(),
        8usize,
        concat!("Alignment of ", stringify!(ctl_lun_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backend) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_req),
            "::",
            stringify!(backend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reqtype) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_req),
            "::",
            stringify!(reqtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reqdata) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_req),
            "::",
            stringify!(reqdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_req),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args_nvl) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_req),
            "::",
            stringify!(args_nvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args_len) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_req),
            "::",
            stringify!(args_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_req),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result_nvl) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_req),
            "::",
            stringify!(result_nvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result_len) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_req),
            "::",
            stringify!(result_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_req),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_str) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_req),
            "::",
            stringify!(error_str)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ctl_lun_list_status {
    CTL_LUN_LIST_NONE = 0,
    CTL_LUN_LIST_OK = 1,
    CTL_LUN_LIST_NEED_MORE_SPACE = 2,
    CTL_LUN_LIST_ERROR = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_lun_list {
    pub backend: [::std::os::raw::c_char; 32usize],
    pub alloc_len: u32,
    pub lun_xml: *mut ::std::os::raw::c_char,
    pub fill_len: u32,
    pub status: ctl_lun_list_status,
    pub error_str: [::std::os::raw::c_char; 160usize],
}
#[test]
fn bindgen_test_layout_ctl_lun_list() {
    const UNINIT: ::std::mem::MaybeUninit<ctl_lun_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ctl_lun_list>(),
        216usize,
        concat!("Size of: ", stringify!(ctl_lun_list))
    );
    assert_eq!(
        ::std::mem::align_of::<ctl_lun_list>(),
        8usize,
        concat!("Alignment of ", stringify!(ctl_lun_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backend) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_list),
            "::",
            stringify!(backend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_len) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_list),
            "::",
            stringify!(alloc_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lun_xml) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_list),
            "::",
            stringify!(lun_xml)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fill_len) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_list),
            "::",
            stringify!(fill_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_list),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_str) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ctl_lun_list),
            "::",
            stringify!(error_str)
        )
    );
}
